#!/usr/bin/ksh
#------------------------------------------------------------------------
#
#MN
#MN NAME
#MN      remcom - Execute a command or script on a remote host or 
#MN               list of hostnames.
#MN               NOTE: remcom -M displays this Manual page!
#MN
#MS SYNOPSIS
#MS      remcom [-M] [-b]  hostname|hostlist    command|scriptname
#MS
#MD DESCRIPTION
#MD      Given a remote hostname or a file containing a list of
#MD      remote hostnames, execute a given command or script
#MD      on the remote machine(s) and give back a report to 
#MD      STDOUT.
#MD
#MD      Options:
#MD
#MD      -M              Display the Manual page for this utility
#MD                      (optional)
#MD
#MD      -b              Execute the designated command or script in
#MD                      the background on the specified host(s).
#MD                      (optional)
#MD
#MD      hostname|       The name of the remote host on which
#MD      hostlist        you want a command run (hostname), or a file 
#MD                      containing a list of remote hosts (hostlist)
#MD                      on which you want a command run.  
#MD
#MD      command|        A Unix command or quote enclosed, semi-colon
#MD      scriptname      separated set of commands that you want run
#MD                      on the remote machine(s).  Alternatively, if
#MD                      the name of a script is given (scriptname), 
#MD                      this script will be copied to the remote machine, 
#MD                      executed and then removed.
#MD
#MD
#MI EXTERNAL INFLUENCES
#MI      None.
#MI
#MR RETURN VALUES
#MR      The remcom command has the following return codes:
#MR
#MR           0   The utility completed successfully
#MR           1   The utility failed
#MR
#ML DIAGNOSTICS
#ML      This tool writes information and error messages
#ML      to Standard Output. 
#ML
#ME EXAMPLES
#ME      To view this man page,
#ME
#ME           remcom -M
#ME
#ME      To find out disk space on a remote server called hosta,
#ME
#ME           remcom hosta bdf
#ME
#ME      To do the same thing as the previous example, but on
#ME      four machines, create a file called /tmp/hostlist that
#ME      contains the list of the hostnames of the four machines,
#ME
#ME           remcom /tmp/hostlist bdf
#ME
#ME      To run a local script called scripta on a remote server called hosta,
#ME
#ME           remcom hosta scripta
#ME
#ME      To run a local script called scripta on a remote server 
#ME      called hosta and run it in the background on hosta,
#ME
#ME           remcom -b hosta scripta
#ME
#ME      Note that in the previous example, the scripta script should
#ME      be written to put the output (STDERR and STDOUT) into a log
#ME      file that is local to the remote hosta machine.  In this way,
#ME      the script can go off and do its thing in the background on 
#ME      the remote hosta and then later, you would have to write another
#ME      script to go out and collect all the output files from all the
#ME      remote servers to bring back all the data to the central server.
#ME
#MW WARNINGS
#MW      Let it be known that this utility is NOT officially 
#MW      supported by Hewlett-Packard Company.  Do not expect to
#MW      call the Response Center with problems with this script.
#MW      This script will be maintained on a "best effort" basis
#MW      by the author.  
#MW
#MX DEPENDENCIES
#MX      The remcom utility depends on the remote host(s) allowing
#MX      access by the local host to run the desired commands.
#MX
#MF FILES
#MF      None.
#MF
#MA AUTHOR
#MA      remcom was initially written by Brian Voss of HP.
#MA
#ML SEE ALSO
#ML      None
#ML
#
#  Revision History:
#
#  10/7/99    B. Voss    Initial release
#  11/10/99   B. Voss    Fixed bug where parameters were not bing
#                        passed through the remote shell.  Also 
#                        removed internal check for contents of .rhosts
#                        file.  Same check can be done via the remcom
#                        command itself.
#  3/1/2002   B. Voss    Added the "-b" option for sending a script
#                        into the background on a machine.  Also added
#                        the PATH variable to be set correctly before
#                        executing the command on the remote machine.
#  2/4/2005   B. Voss    Replaced "rcp" with "scp" and "remsh" with "ssh"
#                        to use SSH and eliminate need for .rhosts
#
#------------------------------------------------------------------------
#
#  Internal Functions:
#
#------------------------------------------------------------------------
#  This function prints the ending line and exits out using whatever
#  return_code is set to.
#------------------------------------------------------------------------
exit_out()
{
#-----------------------------------------------------------------------------
#  Clean up before leaving
#-----------------------------------------------------------------------------
  /bin/rm $tmp_cmd $tmp_wrp $tmp_hostlist 2> /dev/null

  exit $return_code
}

#------------------------------------------------------------------------
#  Display the man page.
#------------------------------------------------------------------------
show_man()
{
  grep "^#M" $script_fullname | cut -c4- | more
}

#------------------------------------------------------------------------
#  If the wrong syntax is used, show the correct syntax and exit
#------------------------------------------------------------------------
show_usage()
{
  printf "Usage:"
  grep "^#MS" $script_fullname | grep -v SYNOPSIS | cut -c4-
  echo "NOTE: Use $man_script -M to see the Manual Page."

  return_code=1
  exit_out
}

#------------------------------------------------------------------------
#  This function is called if the command is interrupted.
#------------------------------------------------------------------------
remcom_trap()
{
  echo "ERROR: ${script_name}: Processing prematurely terminated."
  return_code=1 
  exit_out
}


#=============================================================================
#====================== M A I N   S C R I P T ================================
#=============================================================================

#-----------------------------------------------------------------------------
#  Set a trap in case the command gets interrupted by a signal.
#-----------------------------------------------------------------------------
trap "remcom_trap" 1 2 3 4 15 18 ;

#-----------------------------------------------------------------------------
#  Initialize local varaibles.
#-----------------------------------------------------------------------------
return_code=0
script_name=`basename $0`
script_fullname=$0
command_line="$0 $*"

tmp_hostlist=/tmp/${script_name}.hostlist$$

background=""
nohup=""
in_the_background=""
nswitch=""

#-----------------------------------------------------------------------------
#  Parse the command line switches and initialize parameters.
#-----------------------------------------------------------------------------
while getopts "bM" OPT
do
   case $OPT in

      M) show_man
        exit 0
        ;;

      b) background="1>&- 2>&- &" # special background syntax (see man remsh)
				  # Note that this syntax works for ssh too! 
         nohup=nohup
         nswitch="-n"
         in_the_background=" in the background"
        ;;

     \?) echo "ERROR: ${script_name}:  Invalid command syntax."
        show_usage
        ;;
   esac
done

shift $(($OPTIND -1)) # is used only for parameters at end of
                      # command string.

#-----------------------------------------------------------------------------
#  Make sure the required parameters were specified.
#-----------------------------------------------------------------------------
hosts=$1
shift
commands="$1"
shift
parms="$*"

if [ "$hosts" = "" ]
then
  echo "ERROR:  ${script_name}:  hostname or hostlist is required parameter."
  show_usage
fi

if [ "$commands" = "" ]
then
  echo "ERROR:  ${script_name}:  commands or scriptname is required parameter."
  show_usage
fi

#-----------------------------------------------------------------------------
#  Build the list of hosts
#-----------------------------------------------------------------------------
if [ ! -f "$hosts" ]
then
  echo $hosts > $tmp_hostlist
else
  cat $hosts > $tmp_hostlist
fi

#-----------------------------------------------------------------------------
#  Print the header
#-----------------------------------------------------------------------------
echo
echo "==========  $script_name `date`  ==========="
echo
echo "Remote command being run${in_the_background} is:"
echo
echo "  $commands $parms"
echo

#-----------------------------------------------------------------------------
#  If the command is a script, copy it to a temporary location in the local
#  /tmp ($tmp_cmd) and create a wrapper script ($tmp_wrp) that invokes the
#  original script and then cleans up aftward.  Both of these scripts will
#  be copied down to each target remote host and the wrapper will be
#  executed (possibly in the background if that is specified).
#-----------------------------------------------------------------------------
if [ -f "$commands" ]
then
  tmp_cmd="/tmp/`basename ${commands}`$$"
  tmp_wrp="/tmp/`basename ${tmp_cmd}`_remcom_wrap$$"
  cp -p $commands $tmp_cmd
  echo "$tmp_cmd $parms" > $tmp_wrp
  echo "/bin/rm $tmp_cmd $tmp_wrp" >> $tmp_wrp
  chmod 700 $tmp_cmd
  chmod 700 $tmp_wrp
fi

#-----------------------------------------------------------------------------
#  Process the command on each host in the list
#-----------------------------------------------------------------------------
for host in `cat $tmp_hostlist`
do
  echo "----------------------------------------------------------------"
  echo
  echo "Output for command running on host ${host}:"
  
#-----------------------------------------------------------------------------
#  If the input parameter is a script instead of a command, then copy down
#  the temporary version of the script and the corresponding wrapper to a 
#  temporary area first and then execute it.
#
#  Otherwise, simply use the supplied command.
#-----------------------------------------------------------------------------
  if [ -f "$commands" ]
  then
    scp -p -B -q $tmp_cmd $tmp_wrp ${host}:/tmp
    tmp_command="$nohup $tmp_wrp ${background}"
  else
    tmp_command="$nohup $commands $parms $background"
  fi

#-----------------------------------------------------------------------------
#  Invoke the command on the remote host(s).
#-----------------------------------------------------------------------------
  ssh $host $nswitch -oBatchMode=yes "PATH=$PATH;export PATH;$tmp_command"

  echo

done

echo "----------------------------------------------------------------"
echo

return_code=0
exit_out
