#!/usr/bin/python26
import ConfigParser
import re
import os
from subprocess import Popen, PIPE
from os import path
from optparse import OptionParser

pgbin = '/usr/bin/psql'

URL_RE = re.compile(r"postgresql://(?P<user>[^@]+)@(?P<host>[^}]+}):(?P<port>.+)")
RELLIST = ' '.join((' '.join("""\
SELECT c.relname AS tablename
   FROM pg_class c
   LEFT JOIN pg_namespace n ON n.oid = c.relnamespace
   LEFT JOIN pg_tablespace t ON t.oid = c.reltablespace
  WHERE c.relkind IN ('r'::"char", 'S'::"char", 'v'::"char")
    AND n.nspname='public';""".splitlines())).split())


def _opts():
    p = OptionParser()
    p.add_option('', '--association', dest='assoc', default=None,
                 help="association (e.g. SHRM)")

    p.add_option('', '--amhost', dest='amhost', default='localhost',
                 help="PG host for AM database")
    p.add_option('', '--amdb', dest='amdb', default=None,
                 help="AM database name")
    p.add_option('', '--amport', dest='amport', default='5432',
                 help="AM database port")

    p.add_option('', '--lchost', dest='lchost', default='localhost',
                 help="PG host for learning center database")
    p.add_option('', '--lcdb', dest='lcdb', default=None,
                 help="learning center database name")
    p.add_option('', '--lcport', dest='lcport', default='5432',
                 help="learning center database port")

    opts, args = p.parse_args()
    if opts.assoc is None:
        p.error("association name not given")
    if opts.amdb is None and opts.lcdb is None:
        p.error("need either an AM or LC db settings (or both)")
    return opts


def get_value(config, opt, section):
    if opt.startswith('${'):
        args = opt[2:-1].split(':')
        if not args[0]:
            args[0] = section
        opt = config.get(*tuple(args))
        return get_value(config, opt, args[0])
    else:
        return opt


def main():
    opts = _opts()
    #
    association = opts.assoc
    lcuser = '%s_lc' % association.lower()
    amuser = '%s_am' % association.lower()
    #
    lcdbname = None
    amdbname = None
    if opts.lcdb is not None:
        lchost = opts.lchost or 'localhost'
        lcport = opts.lcport or '5432'
        lcdbname = opts.lcdb
    if opts.amdb is not None:
        amhost = opts.amhost or 'localhost'
        amport = opts.amport or '5432'
        amdbname = opts.amdb
    #
    psql = path.join(pgbin, 'psql')
    createuser = path.join(pgbin, 'createuser')
    #
    lchup = None
    amhup = None
    if lcdbname is not None:
        lchup = ["-U", "postgres",
                 "-h", lchost,
                 "-p", lcport]
    if amdbname is not None:
        amhup = ["-U", "postgres",
                 "-h", amhost,
                 "-p", amport]
    #
    if lchup is not None:
        output = Popen([createuser] + lchup + ['-S', '-D', '-R', lcuser],
                       stdout=PIPE).communicate()[0]
        print output.strip()
    if amhup is not None:
        output = Popen([createuser] + amhup + ['-S', '-D', '-R', lcuser],
                       stdout=PIPE).communicate()[0]
        print output.strip()
        output = Popen([createuser] + amhup + ['-S', '-D', '-R', amuser],
                       stdout=PIPE).communicate()[0]
        print output.strip()
    #
    if lchup is not None:
        output = Popen(
            [psql] + lchup +
            ['--dbname', lcdbname,
             '--command=GRANT ALL ON FUNCTION audit_logger() TO %s' % lcuser],
            stdout=PIPE).communicate()[0]
        print output.strip()
        output = Popen(
            [psql] + lchup +
            ['--dbname', lcdbname,
             '--command=GRANT ALL ON FUNCTION setmoddate() TO %s' % lcuser],
            stdout=PIPE).communicate()[0]
        print output.strip()
        output = Popen(
            [psql] + lchup +
            ['--dbname', lcdbname,
             '--command=ALTER FUNCTION setmoddate() OWNER TO %s' % lcuser],
            stdout=PIPE).communicate()[0]
        print output.strip()

        lctables = Popen(
            [psql] + lchup +
            ['--dbname', lcdbname,
             '-R', ', ', '-A', '-t',
             '--command=' + RELLIST],
            stdout=PIPE).communicate()[0]
        #print lctables

        output = Popen(
            [psql] + lchup +
            ['--dbname', lcdbname,
             '--command=GRANT ALL ON DATABASE %s TO %s;' % (lcdbname, lcuser)],
            stdout=PIPE).communicate()[0]
        print output.strip()
        output = Popen(
            [psql] + lchup +
            ['--dbname', lcdbname,
             '--command=GRANT ALL ON TABLE %s TO %s;' % (lctables, lcuser)],
            stdout=PIPE).communicate()[0]
        print output.strip()

    if amhup is not None:
        amtables = Popen(
            [psql] + amhup +
            ['--dbname', amdbname,
             '-R', ', ', '-A', '-t',
             '--command=' + RELLIST],
            stdout=PIPE).communicate()[0]
        #print amtables
        #
        output = Popen(
            [psql] + amhup +
            ['--dbname', amdbname,
             '--command=GRANT ALL ON DATABASE %s TO %s;' % (amdbname, lcuser)],
            stdout=PIPE).communicate()[0]
        print output.strip()
        output = Popen(
            [psql] + amhup +
            ['--dbname', amdbname,
             '--command=GRANT ALL ON DATABASE %s TO %s;' % (amdbname, amuser)],
            stdout=PIPE).communicate()[0]
        print output.strip()
        output = Popen(
            [psql] + amhup +
            ['--dbname', amdbname,
             '--command=GRANT ALL ON TABLE %s TO %s;' % (amtables, lcuser)],
            stdout=PIPE).communicate()[0]
        print output.strip()
        output = Popen(
            [psql] + amhup +
            ['--dbname', amdbname,
             '--command=GRANT ALL ON TABLE %s TO %s;' % (amtables, amuser)],
            stdout=PIPE).communicate()[0]
        print output.strip()


if __name__ == "__main__":
    main()
